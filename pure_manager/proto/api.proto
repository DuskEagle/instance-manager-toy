syntax = "proto3";

import "google/protobuf/timestamp.proto";
option go_package = "proto";

enum NodeState {
  NodeStarting = 0;
  NodeRunning = 1;
  NodeUnhealthy = 2;
  NodeShuttingDown = 3;
  NodeShutDown = 4;
}

message Node {
  string id = 1;
  int64 version = 2;
  NodeState state = 3;
}

message NodeSpec {
  int64 version = 1;
}

message GroupSpec {
  int64 num_instances = 1;
  int64 version = 2;
}

message UpdateSpecRequest {
  GroupSpec spec = 1;
}

message UpdateSpecResponse {
  string graph_id = 1;
}

message GetCurrentSpecRequest {}

message GetCurrentSpecResponse {
  GroupSpecInfo spec = 1;
}

message GroupSpecInfo {
  GroupSpec spec = 1;
  google.protobuf.Timestamp created_at = 2;
  string created_by_user = 3;
}

message ListSpecsRequest {}

message ListSpecsResponse {
  repeated GroupSpecInfo infos = 1;
}

message ListNodesRequest {

}

message ListNodesResponse {
  repeated Node instances = 1;
}

message StreamNodesRequest {

}

message NodeEvent {
  message InitialList {
    repeated Node nodes = 2;
  }

  message Started {
    Node node = 1;
  }

  message StateChanged {
    string id = 1;
    NodeState new_state = 2;
  }

  oneof event {
    Started started = 1;
    StateChanged state_changed = 2;
  }
}

message ListTaskGraphsRequest {
}

message ListTaskGraphsResponse {
  repeated TaskGraph task_graphs = 1;
}

enum TaskGraphState {
  TaskGraphWaiting = 0;
  TaskGraphRunning = 1;
  // Encountered an error, but some tasks still running.
  TaskGraphRunningErrored = 2;
  TaskGraphFailed = 3;
  TaskGraphSucceeded = 4;
}

message TaskGraph {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp started_at = 3;
  google.protobuf.Timestamp finished_at = 4;
  TaskGraphState state = 5;
  TaskGraphSpec spec = 6;
  repeated Task tasks = 7;
}

message TaskGraphSpec {
  map<string, TaskSpec> tasks = 1;
}

message TaskSpec {
  Action action = 1;
  repeated string prereq_task_ids = 2;
}

message DoNothing {
}

message Action {
  oneof action {
    DoNothing do_nothing = 1;
    StartNode start_node = 2;
    ShutDownNode shut_down_node = 3;
  }
}

message StartNode {
  NodeSpec spec = 1;
}

message ShutDownNode {
  string node_id = 2;
}

enum TaskState {
  TaskWaiting = 0;
  TaskRunning = 1;
  TaskFailed = 2;
  TaskSucceeded = 3;
}

message StreamTaskGraphsRequest {
  bool include_initial = 1;
}

message TaskGraphEvent {
  message InitialList {
    repeated TaskGraph graphs = 1;
  }

  message Started {
    TaskGraph graph = 1;
  }

  message Succeeded {
    string id = 1;
  }

  message Failed {
    string id = 2;
    // TODO: but which task failed tho?
    string error = 3;
  }

  oneof event {
    InitialList initial = 1;
    Started started = 2;
    Succeeded succeeded = 3;
    Failed failed = 4;
  }
}

message Task {
  string id = 1;
  Action action = 2;
  TaskState state = 3;
  google.protobuf.Timestamp started_at = 4;
  google.protobuf.Timestamp finished_at = 5;
  string error = 6;
  repeated string prereq_task_ids = 7;
}

message GetTasksRequest {
  string task_graph_id = 1;
}

message GetTasksResponse {
  repeated Task tasks = 2;
}

message StreamTasksRequest {
  string graph_id = 1;
  bool include_initial = 2;
}

message TaskEvent {
  message InitialState {
    repeated Task tasks = 1;
  }

  message Started {
    string id = 1;
  }

  message Succeeded {
    string id = 1;
  }

  message Failed {
    string id = 1;
    string error = 3;
  }

  oneof event {
    InitialState initial = 1;
    Started started = 2;
    Succeeded succeeded = 3;
    Failed failed = 4;
  }
}

message KillNodeRequest {
  string id = 1;
}

message KillNodeResponse {
}

message Input {
  oneof input {
    UpdateSpecRequest update_spec = 1;
    KillNodeRequest kill_node = 2;
  }
}

service GroupManager {
  // Specs
  rpc UpdateSpec(UpdateSpecRequest) returns (UpdateSpecResponse);
  rpc KillNode(KillNodeRequest) returns (KillNodeResponse);
  rpc GetCurrentSpec(GetCurrentSpecRequest) returns (GetCurrentSpecResponse);
  rpc ListSpecs(ListSpecsRequest) returns (ListSpecsResponse);

  // Nodes
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);
  rpc StreamNodes(StreamNodesRequest) returns (stream NodeEvent);

  // Task graphs
  rpc ListTaskGraphs(ListTaskGraphsRequest) returns (ListTaskGraphsResponse);
  rpc StreamTaskGraphs(StreamTaskGraphsRequest) returns (stream TaskGraphEvent);

  // Tasks
  rpc GetTasks(GetTasksRequest) returns (GetTasksResponse);
  rpc StreamTasks(StreamTasksRequest) returns (stream TaskEvent);
}
