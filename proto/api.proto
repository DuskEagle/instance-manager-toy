syntax = "proto3";

import "google/protobuf/timestamp.proto";
option go_package = "proto";

enum NodeState {
  NodeStarting = 0;
  NodeRunning = 1;
  NodeUnhealthy = 2;
  NodeShuttingDown = 3;
  NodeShutDown = 4;
}

message Node {
  string id = 1;
  int64 version = 2;
  NodeState state = 3;
  // TODO: created_at
}

message NodeSpec {
  int64 version = 1;
}

message GroupSpec {
  int64 num_instances = 1;
  int64 version = 2;
}

message UpdateSpecReq {
  GroupSpec spec = 1;
}

message UpdateSpecResp {
  TaskGraph graph = 1;
}

message GetCurrentSpecReq {}

message GetCurrentSpecResp {
  GroupSpecInfo spec = 1;
}

message GroupSpecInfo {
  GroupSpec spec = 1;
  google.protobuf.Timestamp created_at = 2;
  string created_by_user = 3;
}

message ListSpecsReq {}

message ListSpecsResp {
  repeated GroupSpecInfo infos = 1;
}

message ListNodesReq {

}

message ListNodesResp {
  repeated Node instances = 1;
}

message StreamNodesReq {
  bool include_initial = 1;
}

message NodeEvent {
  message InitialList {
    repeated Node nodes = 2;
  }

  message Started {
    Node node = 1;
  }

  message StateChanged {
    string id = 1;
    NodeState new_state = 2;
  }

  oneof event {
    InitialList initial_list = 1;
    Started started = 2;
    StateChanged state_changed = 3;
  }
}

message ListTaskGraphsReq {
}

message ListTaskGraphsResp {
  repeated TaskGraph task_graphs = 1;
}

enum TaskGraphState {
  TaskGraphWaiting = 0;
  TaskGraphRunning = 1;
  // Encountered an error, but some tasks still running.
  TaskGraphRunningErrored = 2;
  TaskGraphFailed = 3;
  TaskGraphSucceeded = 4;
}

message TaskGraph {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp started_at = 3;
  google.protobuf.Timestamp finished_at = 4;
  TaskGraphState state = 5;
  TaskGraphSpec spec = 6;
  repeated Task tasks = 7;
}

message TaskGraphSpec {
  map<string, TaskSpec> tasks = 1;
}

message TaskSpec {
  Action action = 1;
  repeated string prereq_task_ids = 2;
}

message DoNothing {
  string description = 1;
}

message Action {
  oneof action {
    DoNothing do_nothing = 1;
    StartNode start_node = 2;
    ShutDownNode shut_down_node = 3;
  }
}

message StartNode {
  NodeSpec spec = 1;
}

message ShutDownNode {
  string node_id = 2;
}

enum TaskState {
  TaskWaiting = 0;
  TaskRunning = 1;
  TaskFailed = 2;
  TaskSucceeded = 3;
}

message GetTaskGraphReq {
  string id = 1;
}

message GetTaskGraphResp {
  TaskGraph graph = 1;
}

message StreamTaskGraphsReq {
  bool include_initial = 1;
}

message TaskGraphEvent {
  message InitialList {
    repeated TaskGraph graphs = 1;
  }

  message Started {
    TaskGraph graph = 1;
  }

  message Succeeded {
    string id = 1;
  }

  message Failed {
    string id = 2;
    // TODO: but which task failed tho?
    string error = 3;
  }

  oneof event {
    InitialList initial = 1;
    Started started = 2;
    Succeeded succeeded = 3;
    Failed failed = 4;
  }
}

message Task {
  string id = 1;
  Action action = 2;
  TaskState state = 3;
  google.protobuf.Timestamp started_at = 4;
  google.protobuf.Timestamp finished_at = 5;
  string error = 6;
  repeated string prereq_task_ids = 7;
}

message GetTasksReq {
  string task_graph_id = 1;
}

message GetTasksResp {
  repeated Task tasks = 2;
}

message StreamTasksReq {
  string graph_id = 1;
  bool include_initial = 2;
}

message TaskEvent {
  message InitialState {
    repeated Task tasks = 1;
  }

  message Started {
    string id = 1;
  }

  message Succeeded {
    string id = 1;
  }

  message Failed {
    string id = 1;
    string error = 3;
  }

  message GraphDone {}

  oneof event {
    InitialState initial = 1;
    Started started = 2;
    Succeeded succeeded = 3;
    Failed failed = 4;
    GraphDone done = 5;
  }
}

message KillNodeReq {
  string id = 1;
}

message KillNodeResp {
}

message Input {
  oneof input {
    UpdateSpecReq update_spec = 1;
    KillNodeReq kill_node = 2;
  }
}

service GroupManager {
  // Specs
  rpc UpdateSpec(UpdateSpecReq) returns (UpdateSpecResp);
  rpc KillNode(KillNodeReq) returns (KillNodeResp);
  rpc GetCurrentSpec(GetCurrentSpecReq) returns (GetCurrentSpecResp);
  rpc ListSpecs(ListSpecsReq) returns (ListSpecsResp);

  // Nodes
  rpc ListNodes(ListNodesReq) returns (ListNodesResp);
  rpc StreamNodes(StreamNodesReq) returns (stream NodeEvent);

  // Task graphs
  rpc ListTaskGraphs(ListTaskGraphsReq) returns (ListTaskGraphsResp);
  rpc StreamTaskGraphs(StreamTaskGraphsReq) returns (stream TaskGraphEvent);
  rpc GetTaskGraph(GetTaskGraphReq) returns (GetTaskGraphResp);

  // Tasks
  rpc GetTasks(GetTasksReq) returns (GetTasksResp);
  rpc StreamTasks(StreamTasksReq) returns (stream TaskEvent);
}
